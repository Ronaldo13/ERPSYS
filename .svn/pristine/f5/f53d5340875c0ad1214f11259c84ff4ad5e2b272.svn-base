package com.hqyj.service.im.hth;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import com.hqyj.mapper.hth.ErpsysAccountsReceivableMapper;
import com.hqyj.mapper.hth.ErpsysExpenditureMapper;
import com.hqyj.model.hth.ErpsysExpenditure;
import com.hqyj.service.hth.FinancialManagementExpenditureBillService;

@Service
public class FinancialManagementExpenditureBillServiceImpl implements FinancialManagementExpenditureBillService {

	SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss");
	// 应收账务Mapper
	@Resource
	private ErpsysAccountsReceivableMapper earm;
	// 入账账单Mapper
	@Resource
	private ErpsysExpenditureMapper erm;

	@Override
	public HttpServletRequest initFinancialManagementPage(HttpServletRequest request) {
		// 当起始值和结束值均不为空时
		try {
			String pageEnd = request.getParameter("pageEnd");// 判断是否需要跳转到最后一页
			Integer startMoney = null;
			Integer endMoney = null;
			Integer pageNo = 1;
			Integer pageSize = 10;
			Integer totalExpenditures = 0;
			if ("".equals(request.getParameter("pageNo")) == false && request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if ("".equals(request.getParameter("startMoney")) == false && request.getParameter("startMoney") != null) {
				startMoney = Integer.parseInt(request.getParameter("startMoney"));
			}
			if ("".equals(request.getParameter("endMoney")) == false && request.getParameter("endMoney") != null) {
				endMoney = Integer.parseInt(request.getParameter("endMoney"));
			}
			totalExpenditures = erm.selectExpenditureBetweenStartAndEndCount();// 查询按需筛选的总条目数
			if ("yes".equals(pageEnd)) {
				pageNo = (int) Math.ceil((double) totalExpenditures / (double) pageSize);// 向上取整
																							// 另外：向下取整是Math.floor(x)
				System.out.println(pageNo);
			}
			request.setAttribute("startMoney", startMoney);
			request.setAttribute("endMoney", endMoney);
			request.setAttribute("pageNo", pageNo);
			request.setAttribute("totalExpenditures", totalExpenditures);
			request.setAttribute("pageSize", pageSize);

			Map<String, Integer> map = new HashMap<String, Integer>();
			map.put("startMoney", startMoney);
			map.put("endMoney", endMoney);
			pageNo = (pageNo - 1) * pageSize;// 将pageNo-1乘以pageSize得到数据库查询偏移量
			map.put("pageNo", pageNo);
			map.put("pageSize", pageSize);

			List<ErpsysExpenditure> erpsysExpenditureList = erm.selectExpenditureBetweenStartAndEnd(map);// 按需查询
			for (ErpsysExpenditure erpsysExpenditure : erpsysExpenditureList) {
				if (erpsysExpenditure.getExpenditureTime() != null) {
					String expenditureTimeString = sdf.format(erpsysExpenditure.getExpenditureTime());
					erpsysExpenditure.setExpenditureTimeString(expenditureTimeString);
				}
			}
			request.setAttribute("erpsysExpenditureList", erpsysExpenditureList);// request接收查询出的入账账单
		} catch (

		Exception e) {
			e.printStackTrace();
			request.setAttribute("warning", "输入了非数字！");

		}
		return request;

	}

	/**
	 * 初始化入账账单编辑页面
	 */
	@Override
	public HttpServletRequest initEditExpenditureBillPage(HttpServletRequest request) {
		String expenditureIdString = request.getParameter("expenditureId");
		if (expenditureIdString != null) {
			try {
				int expenditureId = Integer.parseInt(expenditureIdString);
				ErpsysExpenditure expenditure = erm.selectByPrimaryKey(expenditureId);
				if (expenditure.getExpenditureTime() != null) {
					expenditure.setExpenditureTimeString(sdf.format(expenditure.getExpenditureTime()));
				}
				request.setAttribute("expenditure", expenditure);
			} catch (Exception e) {

			}
		}
		return request;
	}

	/**
	 * 修改入账账单信息
	 */
	@Override
	public int updateExpenditureBill(ErpsysExpenditure expenditure) {
		return erm.updateByPrimaryKeySelective(expenditure);
	}

	/**
	 * 初始化新增入账账单页面 日期
	 */
	@Override
	public HttpServletRequest initInsertExpenditureBillPage(HttpServletRequest request) {
		Date date = new Date();
		String dateString = sdf.format(date);
		request.setAttribute("NowDatetime", dateString);
		return request;
	}

	/**
	 * 新增入账账单信息
	 */
	@Override
	public int insertExpenditureBill(ErpsysExpenditure expenditure) {
		System.out.println(expenditure.getExpenditureTimeString());
		return erm.insertSelective(expenditure);
	}

	/**
	 * 删除入账账单信息
	 */
	@Override
	public int deleteExpenditureBill(int expenditureId) {
		return erm.deleteByPrimaryKey(expenditureId);
	}

	/**
	 * 批量删除入账账单信息
	 */
	@Override
	public int PLdeleteExpenditureBill(HttpServletRequest request) {
		int i = 0;
		String[] expenditureIds = request.getParameterValues("expenditureIds");
		// 循环删除所选入账账单
		try {
			for (String string : expenditureIds) {
				int expenditureId = Integer.parseInt(string);
				int j = erm.deleteByPrimaryKey(expenditureId);
				i = i + j;
			}
		} catch (Exception e) {
			return 0;
		}
		return i;
	}

}
